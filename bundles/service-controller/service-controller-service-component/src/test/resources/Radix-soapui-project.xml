<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Radix_system_test" resourceRoot="" soapui-version="4.0.1.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
	<con:settings>
		<con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Radix_PlatformAPI_Service"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value="http://211.62.41.212:8090"/>
</xml-fragment>]]></con:setting>
	</con:settings>
	<con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Radix" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
			<con:endpoint>http://localhost:8090</con:endpoint>
			<con:endpoint>http://211.62.41.110:8090</con:endpoint>
			<con:endpoint>http://211.62.41.212:8090</con:endpoint>
		<con:endpoint>http://211.62.41.128:8090</con:endpoint><con:endpoint>http://211.113.53.126:8088</con:endpoint><con:endpoint>http://api.withapi.com</con:endpoint><con:endpoint>http://211.42.137.121</con:endpoint></con:endpoints>
		<con:resource name="PlatformAPI" path="/platform">
			<con:settings/>
			<con:parameters/>
			<con:resource name="clientkey" path="/clientKeys/{client_key}">
				<con:settings/>
				<con:parameters>
					
					<con:parameter>
						<con:name>Authorization</con:name>
						<con:value>bearer ce87f335-4fe8-4024-9c29-15b13a4aa766</con:value>
						<con:style>HEADER</con:style>
						<con:default>bearer ce87f335-4fe8-4024-9c29-15b13a4aa766</con:default>
					</con:parameter>
				<con:parameter><con:name>client_key</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters>
				<con:resource name="ClientkeyPackage" path="package"><con:settings/><con:parameters/><con:resource name="ClientKeyPackage for exact remove" path="{package_id}"><con:settings/><con:parameters><con:parameter><con:name>package_id</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="DELETE" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:bpac="http://localhost/platform/clientKeys/0bbadc55-967b-45e4-8af5-16c246d44c68/package/%7Bpackage_id%7D">bpac:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/clientKeys/0bbadc55-967b-45e4-8af5-16c246d44c68/package/2">ns:Response</con:element></con:representation><con:request name="지정한 ClientPackage 해제" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST" method="POST"><con:settings/><con:parameters><con:parameter><con:name>package_info</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:pac="http://211.113.53.126/platform/clientKeys/657/package">pac:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/clientKeys/0076b1da-aa73-4ab3-a361-d4c8bebe8a79/package">pac:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ClientPackage 구매" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="client_key" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_info" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;clientKey>  &lt;packages>   &lt;package id=&quot;d3dd6394-8a9f-11e1-ab03-7e8e9372f668&quot;>    &lt;startTimestamp>1334740283&lt;/startTimestamp>    &lt;endTimestamp>1434740283&lt;/endTimestamp>   &lt;/package>  &lt;/packages> &lt;/clientKey>"/>
</con:parameters></con:request><con:request name="ClientPackage 구매 - MapAPI_V1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="client_key" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_info" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;clientKey>  &lt;packages>   &lt;package id=&quot;968866D3-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;startTimestamp>1300000000&lt;/startTimestamp>    &lt;endTimestamp>1400000000&lt;/endTimestamp>   &lt;/package>  &lt;/packages> &lt;/clientKey>"/>
</con:parameters></con:request><con:request name="ClientPackage 구매 (TB Test) - SimplePartnerService.MonthlyUnlimit" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="client_key" value="fed0cd3b-8dd6-11e1-b9ff-001a64c8ce2a"/>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="package_info" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;clientKey>  &lt;packages>   &lt;package id=&quot;7A7515E9-9FEB-11E1-AB3F-F0DEF154CF31&quot;>    &lt;startTimestamp>123456789&lt;/startTimestamp>    &lt;endTimestamp>223456789&lt;/endTimestamp>   &lt;/package>  &lt;/packages> &lt;/clientKey>"/>
</con:parameters></con:request></con:method><con:method name="DELETE" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/clientKeys/0076b1da-aa73-4ab3-a361-d4c8bebe8a79/package">pac:Response</con:element></con:representation><con:request name="특정 client의 전체 ClientPackage 해제" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="client_key" value="0bbadc55-967b-45e4-8af5-16c246d44c68" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="PUT" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>package_info</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/clientKeys/0bbadc55-967b-45e4-8af5-16c246d44c68/package">pac:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/clientKeys/0bbadc55-967b-45e4-8af5-16c246d44c68/package">pac:Fault</con:element></con:representation><con:request name="ClientPackage 수정" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="client_key" value="0bbadc55-967b-45e4-8af5-16c246d44c68"/>
  <con:entry key="package_info" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;clientKey>  &lt;packages>  &lt;package id=&quot;1&quot;>  &lt;startTimestamp>331156789&lt;/startTimestamp>  &lt;/package>  &lt;package id=&quot;2&quot;>  &lt;startTimestamp>442256789&lt;/startTimestamp>  &lt;/package>  &lt;package id=&quot;38&quot;>  &lt;startTimestamp>552256789&lt;/startTimestamp>  &lt;/package>  &lt;/packages> &lt;/clientKey>"/>
</con:parameters></con:request></con:method></con:resource><con:method name="POST" method="POST">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>client_id</con:name>
							<con:value>testClient</con:value>
							<con:style>QUERY</con:style>
							<con:default>testClient</con:default>
						</con:parameter>
						<con:parameter>
							<con:name>key_type</con:name>
							<con:value>P</con:value>
							<con:style>QUERY</con:style>
							<con:default>P</con:default>
							<con:option>P</con:option>
							<con:option>T</con:option>
						</con:parameter>
						<con:parameter>
							<con:name>scope</con:name>
							<con:value>testScope</con:value>
							<con:style>QUERY</con:style>
							<con:default>testScope</con:default>
						</con:parameter>
						<con:parameter>
							<con:name>redirect_uri</con:name>
							<con:value>http://api.withapi.com/test</con:value>
							<con:style>QUERY</con:style>
							<con:default>http://api.withapi.com/test</con:default>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>404 415 401 500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/x-www-form-urlencoded</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401 400 500 404 422</con:status>
						<con:params/>
						<con:element xmlns:cli="http://211.113.53.126/radix/platform/clientKey">cli:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:cli="http://211.113.53.126/radix/platform/clientKey">cli:Response</con:element>
					</con:representation>
					<con:request name="Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="bearer ce87f335-4fe8-4024-9c29-15b13a4aa766" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:request>
				</con:method>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>client_id</con:name>
							<con:value>testClient</con:value>
							<con:style>QUERY</con:style>
							<con:default>testClient</con:default>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>405</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:request name="지원하지 않는 HTTP method 요청" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:request>
				</con:method>
				<con:method name="DELETE" method="DELETE">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>client_key</con:name>
							<con:value/>
							<con:style>TEMPLATE</con:style>
							<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
							<con:default/>
							<con:path xsi:nil="true"/>
							<con:description xsi:nil="true"/>
						</con:parameter>
						<con:parameter>
							<con:name>secret</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
							<con:default/>
							<con:path xsi:nil="true"/>
							<con:description xsi:nil="true"/>
						</con:parameter>
						<con:parameter>
							<con:name>key_type</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
							<con:default/>
							<con:path xsi:nil="true"/>
							<con:description xsi:nil="true"/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>400 401</con:status>
						<con:params/>
						<con:element xmlns:ns="http://211.113.53.126/radix/platform/clientKey/231">ns:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:e5="http://211.113.53.126/radix/platform/clientKey/096062e5-1c8e-415c-a3dd-f4705977ae68">e5:Response</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>405</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:request name="Delete Key" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="bearer ce87f335-4fe8-4024-9c29-15b13a4aa766"/>
  <con:entry key="client_key" value="231"/>
  <con:entry key="secret" value="3213"/>
  <con:entry key="key_type" value="D"/>
</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="service" path="/services">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>Authorization</con:name>
						<con:value>Bearer</con:value>
						<con:style>HEADER</con:style>
						<con:default>Bearer</con:default>
					</con:parameter>
				<con:parameter><con:name>partner_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters>
				<con:resource name="{ServiceName}" path="/{ServiceID}">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>ServiceID</con:name>
							<con:value/>
							<con:style>TEMPLATE</con:style>
							<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
							<con:default/>
							<con:path xsi:nil="true"/>
							<con:description xsi:nil="true"/>
						</con:parameter>
						<con:parameter>
							<con:name>partner_id</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:method name="DELETE" method="DELETE">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType>application/json</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>500</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>500</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/json</con:mediaType>
							<con:status>500 400 404 422</con:status>
							<con:params/>
							<con:element xmlns:ns="http://211.113.53.126/radix/platform/service/88">ns:Fault</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>500</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>500</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Service 삭제 - MapAPI_V1" mediaType="application/xml">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>http://api.withapi.com</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
  <con:entry key="partner_id" value="MapAPIPartnerID"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="ServiceName" value="88"/>
  <con:entry key="ServiceID" value="B932186C-8E93-11E1-951C-7E8E9372F668"/>
</con:parameters>
						</con:request>
					<con:request name="Service 삭제 (TB Test) - SimplePartnerService" mediaType="application/xml">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>http://localhost:8090</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
  <con:entry key="partner_id" value="SimplePartner"/>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="ServiceName" value="88"/>
  <con:entry key="ServiceID" value="EA290A98-9FE9-11E1-AB3F-F0DEF154CF31"/>
</con:parameters>
						</con:request></con:method>
				<con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 422</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/services/379">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/services/379">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500 401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="지정 Service 조회" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="AroTestID"/>
  <con:entry key="Authorization" value="Bearer 222a6580-00ae-417b-aecd-6a9428a960d9"/>
  <con:entry key="ServiceID" value="1"/>
</con:parameters></con:request></con:method></con:resource>
				<con:method name="POST" method="POST">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>partner_id</con:name>
							<con:value>1</con:value>
							<con:style>QUERY</con:style>
							<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
							<con:default>1</con:default>
							<con:path xsi:nil="true"/>
							<con:description xsi:nil="true"/>
						</con:parameter>
						<con:parameter>
							<con:name>service_description</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="REQUEST">
						<con:mediaType>application/xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>500 401</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/x-www-form-urlencoded</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>500 401 400 404 422</con:status>
						<con:params/>
						<con:element xmlns:ser="http://211.113.53.126/radix/platform/service">ser:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200 201</con:status>
						<con:params/>
						<con:element xmlns:ser="http://211.62.41.212/radix/platform/service">ser:Response</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>413</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>413</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>413</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Service 등록 - PublicTranport" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://api.withapi.com</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="AroID"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>PublicTransport&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>1&lt;/version>     &lt;resource>        &lt;owner>partner&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getBusLane&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>BusLane&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;stationID&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getAroBusLane&lt;/name>                 &lt;uri>http://dev.odsay.com/denny_test/appletree/v1/0/Bus/station/Search.asp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>&lt;/user>                 &lt;password>&lt;/password>                 &lt;signature-encoding>&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;stationName&quot;/>                     &lt;param name=&quot;stationClass&quot;/>                     &lt;param name=&quot;SvcID&quot;>                      &lt;default type=&quot;literal&quot;>f78480bc1c06734607e4c7107d0642f3&lt;/default>                     &lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;stationID&quot; to=&quot;stationName&quot;/>                 &lt;/parameter>                 &lt;result>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list> &lt;/Service>"/>
</con:parameters>
					</con:request>
				<con:request name="Service 등록 - MapAPI_V1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="MapAPIPartner"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service descriptionVersion=&quot;0.3&quot;>  &lt;name>MapAPI&lt;/name>  &lt;version>1&lt;/version>   &lt;resource>   &lt;owner>partner&lt;/owner>  &lt;/resource>   &lt;api-list>   &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMap&lt;/name>     &lt;method>GET&lt;/method>     &lt;resource>map&lt;/resource>     &lt;params>      &lt;param name=&quot;module&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMap&lt;/name>     &lt;uri>http://www.withapi.com/MapAPI/serviceJSP/Auth.jsp&lt;/uri>     &lt;method>GET&lt;/method>     &lt;params>      &lt;param name=&quot;key&quot;>       &lt;default type=&quot;literal&quot;>004bfaafeefb4ef986d9&lt;/default>      &lt;/param>      &lt;param name=&quot;module&quot;/>     &lt;/params>     &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter>      &lt;map from=&quot;module&quot; to=&quot;module&quot; />     &lt;/parameter>    &lt;/mapping>   &lt;/api>   &lt;api routingMethod=&quot;Direct&quot;>     &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMetaByPOI&lt;/name>     &lt;method>GET&lt;/method>     &lt;resource>poi&lt;/resource>     &lt;params>      &lt;param name=&quot;selX&quot;/>      &lt;param name=&quot;selY&quot;/>      &lt;param name=&quot;resFunc&quot;/>      &lt;param name=&quot;reqType&quot;/>      &lt;param name=&quot;targetYear&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMetaByPOI&lt;/name>     &lt;uri>http://211.113.46.168/MapAPI/serviceJSP/MetaInfo.jsp&lt;/uri>     &lt;method>GET&lt;/method>     &lt;params>      &lt;param name=&quot;key&quot;>       &lt;default type=&quot;literal&quot;>004bfaafeefb4ef986d9&lt;/default>      &lt;/param>      &lt;param name=&quot;selX&quot;/>      &lt;param name=&quot;selY&quot;/>      &lt;param name=&quot;resFunc&quot;>       &lt;default type=&quot;literal&quot;>viewMetaInfo&lt;/default>      &lt;/param>      &lt;param name=&quot;reqType&quot;/>      &lt;param name=&quot;targetYear&quot;/>     &lt;/params>      &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter>      &lt;map from=&quot;selX&quot; to=&quot;selX&quot; />      &lt;map from=&quot;selY&quot; to=&quot;selY&quot; />      &lt;map from=&quot;reqType&quot; to=&quot;reqType&quot; />      &lt;map from=&quot;targetYear&quot; to=&quot;targetYear&quot; />     &lt;/parameter>    &lt;/mapping>   &lt;/api>         &lt;api routingMethod=&quot;Direct&quot;>              &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getMetaByBox&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>box&lt;/resource>                  &lt;params>                     &lt;param name=&quot;left&quot;/>                     &lt;param name=&quot;bottom&quot;/>                     &lt;param name=&quot;right&quot;/>                     &lt;param name=&quot;top&quot;/>                     &lt;param name=&quot;reqType&quot;/>                     &lt;param name=&quot;targetYear&quot;/>                     &lt;param name=&quot;index&quot;/>                     &lt;param name=&quot;date&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getMetaByBox&lt;/name>                 &lt;uri>http://211.113.46.168/MapAPI/serviceJSP/MetaInfo.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;params>                     &lt;param name=&quot;key&quot;>       &lt;default type=&quot;literal&quot;>004bfaafeefb4ef986d9&lt;/default>      &lt;/param>                     &lt;param name=&quot;left&quot;/>                     &lt;param name=&quot;bottom&quot;/>                     &lt;param name=&quot;right&quot;/>                     &lt;param name=&quot;top&quot;/>                     &lt;param name=&quot;resFunc&quot;>       &lt;default type=&quot;literal&quot;>viewMetaWindow&lt;/default>      &lt;/param>                     &lt;param name=&quot;reqType&quot;/>                     &lt;param name=&quot;targetYear&quot;/>                     &lt;param name=&quot;index&quot;/>                     &lt;param name=&quot;date&quot;/>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;left&quot; to=&quot;left&quot; />                     &lt;map from=&quot;bottom&quot; to=&quot;bottom&quot; />                     &lt;map from=&quot;right&quot; to=&quot;right&quot; />                     &lt;map from=&quot;top&quot; to=&quot;top&quot; />                     &lt;map from=&quot;reqType&quot; to=&quot;reqType&quot; />                     &lt;map from=&quot;targetYear&quot; to=&quot;targetYear&quot; />                     &lt;map from=&quot;index&quot; to=&quot;index&quot; />                     &lt;map from=&quot;date&quot; to=&quot;date&quot; />                 &lt;/parameter>             &lt;/mapping>         &lt;/api>          &lt;api routingMethod=&quot;Direct&quot;>              &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getMetaByText&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>text&lt;/resource>                  &lt;params>                     &lt;param name=&quot;reqType&quot;/>                     &lt;param name=&quot;targetYear&quot;/>                     &lt;param name=&quot;index&quot;/>                     &lt;param name=&quot;date&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getMetaByText&lt;/name>                 &lt;uri>http://211.113.46.168/MapAPI/serviceJSP/MetaInfo.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;params>      &lt;param name=&quot;key&quot;>       &lt;default type=&quot;literal&quot;>004bfaafeefb4ef986d9&lt;/default>      &lt;/param>                     &lt;param name=&quot;resFunc&quot;>       &lt;default type=&quot;literal&quot;>viewTextQuery&lt;/default>      &lt;/param>                     &lt;param name=&quot;reqType&quot;/>                     &lt;param name=&quot;targetYear&quot;/>                     &lt;param name=&quot;index&quot;/>                     &lt;param name=&quot;date&quot;/>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;reqType&quot; to=&quot;reqType&quot; />                     &lt;map from=&quot;targetYear&quot; to=&quot;targetYear&quot; />                     &lt;map from=&quot;index&quot; to=&quot;index&quot; />                     &lt;map from=&quot;date&quot; to=&quot;date&quot; />                 &lt;/parameter>             &lt;/mapping>   &lt;/api>    &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>coordConvert&lt;/name>     &lt;method>GET&lt;/method>     &lt;resource>convert&lt;/resource>     &lt;params>      &lt;param name=&quot;x&quot;/>      &lt;param name=&quot;y&quot;/>      &lt;param name=&quot;inCoordType&quot;/>      &lt;param name=&quot;outCoordType&quot;/>      &lt;param name=&quot;reqType&quot;/>     &lt;/params>    &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>coordConvert&lt;/name>                 &lt;uri>http://211.113.46.168/MapAPI/serviceJSP/MetaInfo.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;params>      &lt;param name=&quot;key&quot;>       &lt;default type=&quot;literal&quot;>004bfaafeefb4ef986d9&lt;/default>      &lt;/param>                     &lt;param name=&quot;x&quot;/>                     &lt;param name=&quot;y&quot;/>                     &lt;param name=&quot;inCoordType&quot;/>                     &lt;param name=&quot;outCoordType&quot;/>                     &lt;param name=&quot;resFunc&quot;>       &lt;default type=&quot;literal&quot;>viewConvertInfo&lt;/default>      &lt;/param>                     &lt;param name=&quot;reqType&quot;/>                 &lt;/params>                &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;x&quot; to=&quot;x&quot;/>                     &lt;map from=&quot;y&quot; to=&quot;y&quot;/>                     &lt;map from=&quot;inCoordType&quot; to=&quot;inCoordType&quot;/>                     &lt;map from=&quot;outCoordType&quot; to=&quot;outCoordType&quot;/>                     &lt;map from=&quot;reqType&quot; to=&quot;reqType&quot; />                 &lt;/parameter>             &lt;/mapping>         &lt;/api>             &lt;/api-list> &lt;/Service>"/>
</con:parameters></con:request><con:request name="Service 등록 (TB Test) - SimplePartnerService" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="SimplePartner"/>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>  &lt;!-- PartnerID: SimplePartner -->  &lt;name>SimplePartnerService&lt;/name>  &lt;version>1&lt;/version>  &lt;resource>   &lt;owner>partner&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->   &lt;authURL>&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->  &lt;/resource>  &lt;api-list>   &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMyResource&lt;/name>     &lt;method>GET&lt;/method>     &lt;resource>MyResource&lt;/resource>     &lt;additionalResources/>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>getMyResource&lt;/name>     &lt;uri>http://211.113.22.152:8080&lt;/uri>     &lt;method>GET&lt;/method>     &lt;content-type>application/xml&lt;/content-type>     &lt;user>&lt;/user>     &lt;password>&lt;/password>     &lt;signature-encoding>&lt;/signature-encoding>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>     &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter/>     &lt;result/>    &lt;/mapping>   &lt;/api>   &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>postMyResource&lt;/name>     &lt;method>POST&lt;/method>     &lt;resource>MyResource&lt;/resource>     &lt;additionalResources/>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>postMyResource&lt;/name>     &lt;uri>http://211.113.22.152:8080&lt;/uri>     &lt;method>POST&lt;/method>     &lt;content-type>application/xml&lt;/content-type>     &lt;user>&lt;/user>     &lt;password>&lt;/password>     &lt;signature-encoding>&lt;/signature-encoding>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>     &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter/>     &lt;result/>    &lt;/mapping>   &lt;/api>   &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>putMyResource&lt;/name>     &lt;method>PUT&lt;/method>     &lt;resource>MyResource&lt;/resource>     &lt;additionalResources/>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>putMyResource&lt;/name>     &lt;uri>http://211.113.22.152:8080&lt;/uri>     &lt;method>PUT&lt;/method>     &lt;content-type>application/xml&lt;/content-type>     &lt;user>&lt;/user>     &lt;password>&lt;/password>     &lt;signature-encoding>&lt;/signature-encoding>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>     &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter/>     &lt;result/>    &lt;/mapping>   &lt;/api>   &lt;api routingMethod=&quot;Direct&quot;>    &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>deleteMyResource&lt;/name>     &lt;method>DELETE&lt;/method>     &lt;resource>MyResource&lt;/resource>     &lt;additionalResources/>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>    &lt;/service-api>    &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>     &lt;name>deleteMyResource&lt;/name>     &lt;uri>http://211.113.22.152:8080&lt;/uri>     &lt;method>DELETE&lt;/method>     &lt;content-type>application/xml&lt;/content-type>     &lt;user>&lt;/user>     &lt;password>&lt;/password>     &lt;signature-encoding>&lt;/signature-encoding>     &lt;params>      &lt;param name=&quot;param1&quot;/>      &lt;param name=&quot;param2&quot;/>     &lt;/params>     &lt;transform>XML&lt;/transform>    &lt;/partner-api>    &lt;mapping>     &lt;parameter/>     &lt;result/>    &lt;/mapping>   &lt;/api>  &lt;/api-list> &lt;/Service>"/>
</con:parameters></con:request></con:method>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>405</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 420 422 401</con:status><con:params/><con:element xmlns:ser="http://211.113.53.126/platform/service">ser:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ser="http://localhost/platform/services">ser:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Service 목록 조회" mediaType="application/xml">
						<con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
						<con:endpoint>http://localhost:8090</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="AroTestID"/>
  <con:entry key="Authorization" value="Bearer 0246bdce-8846-44bb-b80a-93636fc89259"/>
</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="client" path="/clientKeys">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>Authorization</con:name>
						<con:value/>
						<con:style>HEADER</con:style>
						<con:default/>
					</con:parameter>
				</con:parameters>
				<con:method name="POST" method="POST">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>client_id</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>key_type</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>scope</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>redirect_uri</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					<con:parameter><con:name>partner_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters>
					<con:representation type="REQUEST">
						<con:mediaType>application/xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401 400 404 422</con:status>
						<con:params/>
						<con:element xmlns:cli="http://211.113.53.126/radix/platform/clientKey">cli:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:cli="http://211.113.53.126/platform/clientKeys">cli:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="admin"/>
  <con:entry key="Authorization" value="bearer ce87f335-4fe8-4024-9c29-15b13a4aa766"/>
  <con:entry key="scope" value="testScope"/>
  <con:entry key="redirect_uri" value="http://api.withapi.com/test"/>
  <con:entry key="key_type" value="P"/>
  <con:entry key="client_id" value="testClient"/>
</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
		<con:resource name="packages" path="/packages"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer d87d18c0-c9f0-4733-b399-677ba2cc63ff</con:value><con:style>HEADER</con:style><con:default>Bearer d87d18c0-c9f0-4733-b399-677ba2cc63ff</con:default></con:parameter><con:parameter><con:name>partner_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:resource name="package_id" path="/{package_id}"><con:settings/><con:parameters><con:parameter><con:name>package_id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>partner_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="DELETE (remove)" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:ns="http://211.113.53.126/platform/packages/38">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://211.113.53.126/platform/packages/88">ns:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Package 삭제 - MapAPI_V1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="MapAPIPartnerID"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_id" value="6C7A482D-8E95-11E1-951C-7E8E9372F668"/>
</con:parameters></con:request><con:request name="Package 삭제 (TB Test) - SimplePartnerService" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="SimplePartner"/>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="package_id" value="7D395ADC-9F31-11E1-B76B-F0DEF154CF31"/>
</con:parameters></con:request></con:method><con:method name="PUT (modify)" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>package_description</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://211.113.53.126/platform/packages/802">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/packages/802">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="TestPartner1"/>
  <con:entry key="Authorization" value="Bearer ce87f335-4fe8-4024-9c29-15b13a4aa766"/>
  <con:entry key="package_id" value="802"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;packageNameModified_20120329&quot;>   &lt;apis>       &lt;!-- Service APIs -->     &lt;api id=&quot;1&quot;>           &lt;!-- Service API's Policy -->      &lt;policies>       &lt;policy id=&quot;1&quot;>        &lt;parameter name=&quot;startTime&quot;>2012/03/27 00:00:00&lt;/parameter>        &lt;parameter name=&quot;endTime&quot;>2012/04/26 23:59:59&lt;/parameter>        &lt;parameter name=&quot;maxCount&quot;>1000&lt;/parameter>        &lt;parameter name=&quot;minCount&quot;>1&lt;/parameter>          &lt;/policy>       &lt;policy id=&quot;2&quot;>        &lt;parameter name=&quot;startTime&quot;>2012/03/27 00:00:00&lt;/parameter>        &lt;parameter name=&quot;endTime&quot;>2012/04/26 23:59:59&lt;/parameter>          &lt;/policy>      &lt;/policies>     &lt;/api>     &lt;/apis>      &lt;!-- Package's Policy -->   &lt;policies>    &lt;policy id=&quot;2&quot;>       &lt;parameter name=&quot;startTime&quot;>2012/03/27 00:00:00&lt;/parameter>       &lt;parameter name=&quot;endTime&quot;>2012/04/26 23:59:59&lt;/parameter>     &lt;/policy>   &lt;/policies> &lt;/package>"/>
</con:parameters></con:request></con:method><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/packages/1">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:ns="http://localhost/platform/packages/1">ns:Fault</con:element></con:representation><con:request name="지정 Package 조회" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://211.113.53.126:8088</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="not_registered_partnerid"/>
  <con:entry key="package_id" value="1"/>
</con:parameters></con:request></con:method></con:resource><con:method name="POST (create)" method="POST"><con:settings/><con:parameters><con:parameter><con:name>partner_id</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:default>1</con:default></con:parameter><con:parameter><con:name>package_description</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400 500 422</con:status><con:params/><con:element xmlns:pac="http://211.113.53.126/radix/platform/packages">pac:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:pac="http://211.113.53.126/platform/packages">pac:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Package 등록" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="AroTestID"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;packageName&quot;>   &lt;apis>       &lt;!-- Service APIs -->     &lt;api id=&quot;3b855050-8a98-11e1-ab03-7e8e9372f668&quot;>           &lt;!-- Service API's Policy -->      &lt;policies>       &lt;!-- Design Policy -->       &lt;usageLimit name=&quot;Basic&quot;>     &lt;duration>10D&lt;/duration>     &lt;maxCount>1000&lt;/maxCount>     &lt;condition>absolute&lt;/condition>       &lt;/usageLimit>       &lt;usageLimit name=&quot;Month&quot;>     &lt;duration>1M&lt;/duration>     &lt;maxCount>100000&lt;/maxCount>     &lt;condition>absolute&lt;/condition>          &lt;!-- (Optional Properties) -->     &lt;startTimestamp>1334620797&lt;/startTimestamp>     &lt;endTimestamp>1334624432&lt;/endTimestamp>       &lt;/usageLimit>       &lt;usageTerm name=&quot;termSamplePolicy&quot;/>      &lt;/policies>     &lt;/api>        &lt;/apis>      &lt;!-- Package's Policy -->   &lt;policies>     &lt;usageLimit name=&quot;Basic&quot;>   &lt;duration>1M&lt;/duration>   &lt;maxCount>1000&lt;/maxCount>   &lt;condition>relative&lt;/condition>     &lt;/usageLimit>     &lt;usageTerm name=&quot;termSamplePolicy&quot;/>   &lt;/policies> &lt;/package>"/>
</con:parameters></con:request><con:request name="Package 등록 - MapAPI_V1.MonthlyUnlimit" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="MapAPIPartner"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;MonthlyUnlimit&quot;> &lt;!--  service api id 목록  * coordConvert : b933c61e-8e93-11e1-951c-7e8e9372f668  * getMap : b9372083-8e93-11e1-951c-7e8e9372f668  * getMetaByBox : b93a7be8-8e93-11e1-951c-7e8e9372f668  * getMetaByPOI : b93dd74d-8e93-11e1-951c-7e8e9372f668  * getMetaByText : b9410ba2-8e93-11e1-951c-7e8e9372f668 -->  &lt;apis>   &lt;api id=&quot;0B09577B-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>    &lt;api id=&quot;0B0C8BD0-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>    &lt;api id=&quot;0B0FC025-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>    &lt;api id=&quot;0B12F47A-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>    &lt;api id=&quot;0B1601BF-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;/apis>   &lt;policies>   &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>    &lt;duration>1M&lt;/duration>    &lt;maxCount>-1&lt;/maxCount>    &lt;condition>relative&lt;/condition>   &lt;/usageLimit>  &lt;/policies> &lt;/package>"/>
</con:parameters></con:request><con:request name="Package 등록 - MapAPI_V1.100_per_Month" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="MapAPIPartner"/>
  <con:entry key="Authorization" value="Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;100_per_Month&quot;> &lt;!--  service api 목록  * coordConvert  * getMap  * getMetaByBox  * getMetaByPOI  * getMetaByText -->  &lt;apis>   &lt;api id=&quot;0B09577B-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;100_per_Month&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>100&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;0B0C8BD0-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;100_per_Month&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>100&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;0B0FC025-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;100_per_Month&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>100&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;0B12F47A-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;100_per_Month&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>100&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;0B1601BF-8EB2-11E1-9F7A-7E8E9372F668&quot;>    &lt;policies>     &lt;usageLimit name=&quot;100_per_Month&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>100&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>  &lt;/apis>   &lt;policies>   &lt;usageLimit name=&quot;100_per_Month&quot;>    &lt;duration>1M&lt;/duration>    &lt;maxCount>-1&lt;/maxCount>    &lt;condition>relative&lt;/condition>   &lt;/usageLimit>  &lt;/policies> &lt;/package>"/>
</con:parameters></con:request><con:request name="Package 등록 (TB Test) - SimplePartnerService.MonthlyUnlimit" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="partner_id" value="SimplePartner"/>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;MonthlyUnlimit&quot;>  &lt;apis>   &lt;api id=&quot;DDDDCE16-9FEA-11E1-AB3F-F0DEF154CF31&quot;>    &lt;policies>     &lt;usageLimit name=&quot;Free&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;DE1ECEBB-9FEA-11E1-AB3F-F0DEF154CF31&quot;>    &lt;policies>     &lt;usageLimit name=&quot;Free&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;DE5AED60-9FEA-11E1-AB3F-F0DEF154CF31&quot;>    &lt;policies>     &lt;usageLimit name=&quot;Free&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>   &lt;api id=&quot;DE973315-9FEA-11E1-AB3F-F0DEF154CF31&quot;>    &lt;policies>     &lt;usageLimit name=&quot;Free&quot;>      &lt;duration>1M&lt;/duration>      &lt;maxCount>-1&lt;/maxCount>      &lt;condition>relative&lt;/condition>     &lt;/usageLimit>    &lt;/policies>   &lt;/api>  &lt;/apis>  &lt;policies>   &lt;usageLimit name=&quot;MonthlyUnlimit&quot;>    &lt;duration>1M&lt;/duration>    &lt;maxCount>-1&lt;/maxCount>    &lt;condition>relative&lt;/condition>   &lt;/usageLimit>  &lt;/policies> &lt;/package>"/>
</con:parameters></con:request></con:method><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/packages">pac:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pac="http://localhost/platform/packages">pac:Response</con:element></con:representation><con:request name="Package 목록 조회" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://211.113.53.126:8088</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="partner_id" value="test_partnerid_1334047471900" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:resource>
		<con:resource name="oauth" path="/oauth">
			<con:settings/>
			<con:parameters/>
			<con:resource name="Authorization" path="/authorize">
				<con:settings/>
				<con:parameters>
					<con:parameter required="false">
						<con:name>Authorization</con:name>
						<con:value>Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk=</con:value>
						<con:style>HEADER</con:style>
						<con:default>Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk=</con:default>
					</con:parameter>
					<con:parameter>
						<con:name>user_oauth_approval</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
					<con:parameter>
						<con:name>response_type</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
					<con:parameter>
						<con:name>state</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
					<con:parameter>
						<con:name>client_id</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
					<con:parameter>
						<con:name>redirect_uri</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
					<con:parameter>
						<con:name>scope</con:name>
						<con:value/>
						<con:style>QUERY</con:style>
						<con:default/>
					</con:parameter>
				</con:parameters>
				<con:method name="POST" method="POST">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/x-www-form-urlencoded</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>400 401</con:status>
						<con:params/>
						<con:element xmlns:aut="http://211.113.53.126/radix/oauth/authorize">aut:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>401 500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="request Implicit Grant" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application.json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:encoding/>
						<con:endpoint>http://api.withapi.com</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="user_oauth_approval" value="true"/>
  <con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRlYjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
  <con:entry key="scope" value="testScope"/>
  <con:entry key="response_type" value="token"/>
  <con:entry key="redirect_uri" value="http://redirect.withapi.com"/>
  <con:entry key="state" value="client own state"/>
  <con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
</con:parameters>
					</con:request>
					<con:request name="request AuthorizationCode Grant" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="response_type" value="code"/>
  <con:entry key="redirect_uri" value="http://www.paran.com"/>
</con:parameters>
					</con:request>
				</con:method>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>text/html</con:mediaType>
						<con:status>405 401</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
						<con:element xmlns:aut="http://211.113.53.126/radix/oauth/authorize">aut:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>302</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="지원하지 않는 메소드" mediaType="application/xml" accept="text/html">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="user_oauth_approval" value="true"/>
  <con:entry key="response_type" value="token"/>
  <con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
  <con:entry key="scope" value="testScope"/>
  <con:entry key="redirect_uri" value="http://redirect.withapi.com"/>
  <con:entry key="state" value="fdsfs"/>
  <con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
		</con:resource>
		<con:resource name="ServiceAPI - Aro" path="/PublicTransport3">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>Authorization</con:name>
					<con:value/>
					<con:style>HEADER</con:style>
					<con:default/>
				</con:parameter>
			</con:parameters>
			<con:resource name="BusLaneSearch" path="/1/BusLane">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>busNumber</con:name>
						<con:value>155</con:value>
						<con:style>QUERY</con:style>
						<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
						<con:default>155</con:default>
						<con:path xsi:nil="true"/>
						<con:description xsi:nil="true"/>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>CID</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>stationListYn</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>displayCnt</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>startNO</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401 408</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://localhost:8090</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer e67ce50c-0eed-404e-9291-cd5e8052e2f7" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="BusLane" path="/BusLaneResult/busID={busID}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>busID</con:name>
						<con:value>12018</con:value>
						<con:style>TEMPLATE</con:style>
						<con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
						<con:default>12018</con:default>
						<con:path xsi:nil="true"/>
						<con:description xsi:nil="true"/>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="BusStationSearch" path="/BusStationSearch/stationName={stationName}&amp;CID={CID}&amp;stationClass={stationClass}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>stationName</con:name>
						<con:value>11</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>11</con:default>
					</con:parameter>
					<con:parameter>
						<con:name>CID</con:name>
						<con:value>1000</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>1000</con:default>
					</con:parameter>
					<con:parameter>
						<con:name>stationClass</con:name>
						<con:value>1</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>1</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>displayCnt</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>startNO</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="BusStation" path="/BusStationResult/StationID={stationID}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>stationID</con:name>
						<con:value>107475</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>107475</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="MapLoadLane" path="/MapLoadLane/param={param}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>param</con:name>
						<con:value>0:0@12018:1:-1:-1</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>0:0@12018:1:-1:-1</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="SubwayInfo" path="/SubwayInfo/stationID={stationID}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>stationID</con:name>
						<con:value>130</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>130</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="SubwayTransit" path="/SubwayTransit/stationID={stationID}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>stationID</con:name>
						<con:value>133</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>133</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="POISearch" path="/POISearch/x={x}&amp;y={y}&amp;radius={radius}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>x</con:name>
						<con:value>126.933361407195</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>126.933361407195</con:default>
					</con:parameter>
					<con:parameter>
						<con:name>y</con:name>
						<con:value>37.3643392278118</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>37.3643392278118</con:default>
					</con:parameter>
					<con:parameter>
						<con:name>radius</con:name>
						<con:value>100</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>100</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>stationClass</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="POIBoundarySearch" path="/POIBoundarySearch/Param={param}">
				<con:settings/>
				<con:parameters>
					<con:parameter>
						<con:name>param</con:name>
						<con:value>127.045478316811:37.68882830829:127.055063420699:37.6370465749586</con:value>
						<con:style>TEMPLATE</con:style>
						<con:default>127.045478316811:37.68882830829:127.055063420699:37.6370465749586</con:default>
					</con:parameter>
				</con:parameters>
				<con:method name="GET" method="GET">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>echo</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>output</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>encoding</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>stationClass</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>Eparam</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
						<con:parameter>
							<con:name>mainStationClass</con:name>
							<con:value/>
							<con:style>QUERY</con:style>
							<con:default/>
						</con:parameter>
					</con:parameters>
					<con:representation type="FAULT">
						<con:mediaType>application/json</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch">bus:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/json</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:bus="http://211.113.53.126/radix/aro/BusLaneSearch/busNo=150">bus:Response</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:request>
				</con:method>
			</con:resource>
		</con:resource>
		<con:resource name="ServiceAPI - MapAPI_V1" path="/MapAPI/1"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee</con:value><con:style>HEADER</con:style><con:default>Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee</con:default></con:parameter></con:parameters><con:resource name="map" path="/map"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>module</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 503</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="getMap" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="module" value="Map,Geocoder,Direction" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="poi" path="/poi"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>selX</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>selY</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>reqType</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>targetYear</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="getMetaByPOI" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reqType" value="MetaInfo"/>
  <con:entry key="targetYear" value="all"/>
  <con:entry key="selY" value="1948862"/>
  <con:entry key="selX" value="955118.5"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="box" path="/box"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>left</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bottom</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>right</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>top</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>reqType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>targetYear</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>index</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>date</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="getMetaByBox" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reqType" value="MetaWindow"/>
  <con:entry key="bottom" value="1948637.5"/>
  <con:entry key="left" value="948070"/>
  <con:entry key="targetYear" value="all"/>
  <con:entry key="right" value="957670"/>
  <con:entry key="top" value="1952637.5"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="text" path="/text"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>reqType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>targetYear</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>index</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>date</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="getMetaByText" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="index" value="o75435"/>
  <con:entry key="reqType" value="TextQuery"/>
  <con:entry key="targetYear" value="all"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="convert" path="/convert"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>x</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>y</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>inCoordType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>outCoordType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>reqType</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="coordConvert" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.withapi.com</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="inCoordType" value="0"/>
  <con:entry key="reqType" value="ConvPos"/>
  <con:entry key="outCoordType" value="7"/>
  <con:entry key="y" value="1949802.5"/>
  <con:entry key="x" value="953655.5"/>
</con:parameters></con:request></con:method></con:resource></con:resource><con:resource name="ServiceAPI (TB Test) - SimplePartnerService" path="/SimplePartnerService/1"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee</con:value><con:style>HEADER</con:style><con:default>Bearer 32bafb48-47a5-47a6-b3e8-16d60d9b0dee</con:default></con:parameter></con:parameters><con:resource name="MyResource" path="/MyResource"><con:settings/><con:parameters/><con:method name="GET" method="GET"><con:settings/><con:parameters><con:parameter><con:name>param1</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>param2</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 503 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/octet-stream</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="getMyResource" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="param1" value="1234"/>
  <con:entry key="param2" value="abcd"/>
</con:parameters></con:request></con:method><con:method name="POST" method="POST"><con:settings/><con:parameters><con:parameter><con:name>b1</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>b2</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>b3</con:name><con:value/><con:style>PLAIN</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:myr="http://localhost/SimplePartnerService/1/MyResource">myr:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="postMyResource" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8090</con:endpoint><con:request>aaa=bbbaaaaaaaaaaaaaa</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer 9265ce2e-9d39-4023-ba95-8bca09cab1ad"/>
  <con:entry key="b1" value="aaajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj"/>
  <con:entry key="b3" value="ccc"/>
  <con:entry key="b2" value="bbb"/>
</con:parameters></con:request></con:method></con:resource></con:resource><con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://211.113.53.126/radix/platform/clientKey</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>Fault</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:cli="http://211.113.53.126/radix/platform/clientKey">cli:_Fault</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_Fault</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>message</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>messageId</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>status</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="cli:messageId" xmlns:cli="http://211.113.53.126/radix/platform/clientKey"><inf:other>cli:status</inf:other></inf:comesBefore><inf:comesBefore qname="cli:status" xmlns:cli="http://211.113.53.126/radix/platform/clientKey"/><inf:comesBefore qname="cli:message" xmlns:cli="http://211.113.53.126/radix/platform/clientKey"><inf:other>cli:messageId</inf:other><inf:other>cli:status</inf:other></inf:comesBefore></inf:content></inf:complexType></inf:schema>]]></con:inferredSchema>
	</con:interface>
	<con:testSuite name="OAuth Test - ServiceAPI">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Implicit Grant token 발급 test" searchProperties="true" id="a46b542a-f099-4251-95ad-9b2c6e158396">
			<con:settings/>
			<con:testStep type="restrequest" name="implicit grant token 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="implicit grant token 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
							<con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">true</con:setting>
							<con:setting id="discardResponse">true</con:setting>
						</con:settings>
						<con:encoding/>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>302</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="user_oauth_approval" value="true"/>
							<con:entry key="scope" value="testScope"/>
							<con:entry key="response_type" value="token"/>
							<con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
							<con:entry key="redirect_uri" value="http://www.paran.com"/>
							<con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Implicit grant token 요청 - invalid client id">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Implicit grant token 요청 - invalid client id" mediaType="application/x-www-form-urlencoded" postQueryString="false" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>401</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>invalid_client</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="user_oauth_approval" value="true"/>
							<con:entry key="scope" value="testScope"/>
							<con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
							<con:entry key="response_type" value="code"/>
							<con:entry key="redirect_uri" value="http://www.paran.com"/>
							<con:entry key="state" value="fdsf"/>
							<con:entry key="client_id" value="94eb091e-475a-4787-9209-7278b5309291"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Implicit grant token 요청 - invalid redirect uri">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Implicit grant token 요청 - invalid redirect uri" mediaType="application/x-www-form-urlencoded" postQueryString="false" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>Invalid redirect</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="user_oauth_approval" value="true"/>
							<con:entry key="scope" value="testScope"/>
							<con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
							<con:entry key="response_type" value="code"/>
							<con:entry key="redirect_uri" value="http://www.paran.co.kr"/>
							<con:entry key="state" value="gfdsg"/>
							<con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="지원하지 않는 메소드">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="지원하지 않는 메소드" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="user_oauth_approval" value="true"/>
							<con:entry key="scope" value="testScope"/>
							<con:entry key="response_type" value="token"/>
							<con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
							<con:entry key="redirect_uri" value="http://www.paran.com"/>
							<con:entry key="state" value="fdsf"/>
							<con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Auth code Grant Token" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Refresh Token 인증" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - 한번 사용된 Auth Code 로 요청" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - 만료된 Refresh Token 으로 요청" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User Authentication Fail" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User Deny" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User 가 반응하지 않음" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="OAuth Test - PlatformAPI">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Implicit Grant token 발급 test" searchProperties="true">
			<con:settings/>
			<con:testStep type="restrequest" name="implicit grant token 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="implicit grant token 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:encoding/>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>302</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="user_oauth_approval" value="true"/>
							<con:entry key="scope" value="testScope"/>
							<con:entry key="response_type" value="token"/>
							<con:entry key="Authorization" value="Basic NTlmZmE2ZjQtMDkwMS00ZmZjLTgyYWQtNDQ2ODc1NDBhYjRiOjIxMzM0ZDRmZmI3OTk0ZjUwOTRl YjQxYjVhNzBkZDNhMTY1NzgwZjk="/>
							<con:entry key="redirect_uri" value="http://www.paran.com"/>
							<con:entry key="client_id" value="59ffa6f4-0901-4ffc-82ad-44687540ab4b"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Implicit grant token 요청 - invalid client id">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Implicit grant token 요청 - invalid client id" mediaType="application/x-www-form-urlencoded" postQueryString="false" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>401</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>Bad credentials</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="response_type" value="token"/>
							<con:entry key="Authorization" value="Basic Yml6cG9ydGFsOnBhc3NiaXox"/>
							<con:entry key="redirect_uri" value="http://www.paran.com"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Auth code Grant Token" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 - Refresh Token 인증" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - 한번 사용된 Auth Code 로 요청" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - 만료된 Refresh Token 으로 요청" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User Authentication Fail" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User Deny" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 발급 오류 - User 가 반응하지 않음" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="Radix PlatformAPI TestSuite - clientkey issue">
		<con:description>TestSuite generated for REST Service [Radix]</con:description>
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="clientkey 발급 TestCase" searchProperties="true" id="ad32fe9b-551a-4c9b-a49b-38af86dfbca9">
			<con:description>TestCase generated for REST Resource [clientkey]
				located at [/platform/clientKey]</con:description>
			<con:settings/>
			<con:testStep type="properties" name="Properties_123">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>OAuth_token</con:name>
						</con:property>
						<con:property>
							<con:name>redirect_uri</con:name>
							<con:value>fdfs1234567890</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Groovy Script">
				<con:settings/>
				<con:config><script>def ts = project.getTestSuitByName(Radix PlatformAPI TestSuite - clientkey issue)
def tc = ts.getTestCaseByName(clientkey 발급 TestCase)</script></con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Test client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="bearer ba524372-5e5e-41ee-bc0b-e8676fb8db79"/>
  <con:entry key="scope" value="testScope"/>
  <con:entry key="redirect_uri" value="http://www.paran.com"/>
  <con:entry key="key_type" value="D"/>
  <con:entry key="client_id" value="testClient"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Remove Test ClientKey</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Remove Test ClientKey</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Remove Test ClientKey</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" useXQuery="false" ignoreEmpty="false" transferChildNodes="false">
						<con:name>gfsd</con:name>
						<con:sourceType>result</con:sourceType>
						<con:sourceStep>Groovy Script</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Remove Test ClientKey</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 발급" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="invalid oauth token" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="invalid oauth token" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="지원하지 않는 HTTP method 요청" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="지원하지 않는 HTTP method 요청" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목( type ) 누락" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목( type ) 누락" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목( client_id ) 누락" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목( client_id ) 누락" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="client_id" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목 Type 오류" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목 Type 오류" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="AutoInferSchemas">true</con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="U" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Remove Test ClientKey">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/clientKeys/{client_key}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Remove Test ClientKey" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="bearer 7264e542-c1de-4a18-b327-9b75e6c248e7"/>
							<con:entry key="key_type" value="D"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - Development" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="Test client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="D" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Test client key 폐기">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 폐기" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>true</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="ec737929-0c98-4e09-a34d-898517f18371"/>
  <con:entry key="secret" value="c0ee396574c17e711b37a8192062d7e4156c3c73"/>
  <con:entry key="key_type" value="D"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - Product" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>true</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="ce61f8fe-7641-43b1-bbb5-c170ea25ab83"/>
  <con:entry key="secret" value="d6219bb60e2a742c49ab3847c9e01f19727c9958"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - 필수항목누락" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="필수항목누락 테스트 용 Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="필수항목누락 테스트 용 Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="properties" name="client_key 폐기 필수항목 누락 테스트 Properties">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>client_key</con:name>
							<con:value>77c9cd24-bd93-45c1-8768-3a79e5a3e81f</con:value>
						</con:property>
						<con:property>
							<con:name>secret</con:name>
							<con:value>1a42309722c5c78832fd1915fe62757c46d67bd8</con:value>
						</con:property>
						<con:property>
							<con:name>key_type</con:name>
							<con:value>P</con:value>
						</con:property>
						<con:property>
							<con:name>empty_value</con:name>
							<con:value/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for clientkey 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - client_key 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - client_key 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="secret" value="1a42309722c5c78832fd1915fe62757c46d67bd8"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key_type 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key_type 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key_type 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="77c9cd24-bd93-45c1-8768-3a79e5a3e81f"/>
  <con:entry key="secret" value="1a42309722c5c78832fd1915fe62757c46d67bd8"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for secret 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - secret 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - secret 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="77c9cd24-bd93-45c1-8768-3a79e5a3e81f"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key 데이터 삭제">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key 데이터 삭제">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key 데이터 삭제" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="77c9cd24-bd93-45c1-8768-3a79e5a3e81f"/>
  <con:entry key="secret" value="1a42309722c5c78832fd1915fe62757c46d67bd8"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - 필수항목 값 오류" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="필수항목오류테스트용 Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="필수항목오류테스트용 Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="properties" name="client_key 폐기 필수항목값오류 테스트 Properties">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>client_key</con:name>
							<con:value>34ef9286-218f-4a89-b9e4-31d333f48ee4</con:value>
						</con:property>
						<con:property>
							<con:name>secret</con:name>
							<con:value>6cd64319925dc4b1828788236316e126c659c047</con:value>
						</con:property>
						<con:property>
							<con:name>key_type</con:name>
							<con:value>P</con:value>
						</con:property>
						<con:property>
							<con:name>empty_value</con:name>
							<con:value/>
						</con:property>
						<con:property>
							<con:name>invalid_client_key</con:name>
							<con:value>77c9cd24-bd93-45c1-8768-3a79e5a3e81f</con:value>
						</con:property>
						<con:property>
							<con:name>invlaid_secret</con:name>
							<con:value>1a42309722c5c78832fd1915fe62757c46d67bd8</con:value>
						</con:property>
						<con:property>
							<con:name>invalid_key_type</con:name>
							<con:value>D</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for clientkey 값오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>client_key for 미존재Key</con:name>
						<con:sourceType>invalid_client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - 존재하지 않는 client_key">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - 존재하지 않는 client_key" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"not_found"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="77c9cd24-bd93-45c1-8768-3a79e5a3e81f"/>
  <con:entry key="secret" value="6cd64319925dc4b1828788236316e126c659c047"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key_type 매핑오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for type오류</con:name>
						<con:sourceType>invalid_key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key_type매핑오류">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key_type매핑오류" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"not_found"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="34ef9286-218f-4a89-b9e4-31d333f48ee4"/>
  <con:entry key="secret" value="6cd64319925dc4b1828788236316e126c659c047"/>
  <con:entry key="key_type" value="D"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for secret 매핑오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for 갑매핑오류</con:name>
						<con:sourceType>invlaid_secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - secret 매핑오류">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - secret 매핑오류" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="34ef9286-218f-4a89-b9e4-31d333f48ee4"/>
  <con:entry key="secret" value="1a42309722c5c78832fd1915fe62757c46d67bd8"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key 데이터 삭제">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key 데이터 삭제">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key 데이터 삭제" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="34ef9286-218f-4a89-b9e4-31d333f48ee4"/>
  <con:entry key="secret" value="6cd64319925dc4b1828788236316e126c659c047"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="Radix PlatformAPI TestSuite - clientkey remove">
		<con:description>TestSuite generated for REST Service [Radix]</con:description>
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="clientkey 발급 TestCase" searchProperties="true" id="684b39b5-ea75-4302-8373-3f8d5e7f1ce0" disabled="true">
			<con:description>TestCase generated for REST Resource [clientkey]
				located at [/platform/clientKey]</con:description>
			<con:settings/>
			<con:testStep type="restrequest" name="Test client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="D" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="invalid oauth token" disabled="true">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="invalid oauth token" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="지원하지 않는 HTTP method 요청">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="지원하지 않는 HTTP method 요청" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목( type ) 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목( type ) 누락" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목( client_id ) 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목( client_id ) 누락" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="client_id" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="client key 발급 필수항목 Type 오류">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="client key 발급 필수항목 Type 오류" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="AutoInferSchemas">true</con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"invalid_input_parameter"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="key_type" value="U" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - Development" searchProperties="true" id="027f4d22-3956-4a2d-842b-a9c6d8e70280">
			<con:settings/>
			<con:testStep type="restrequest" name="Test client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="bearer ba524372-5e5e-41ee-bc0b-e8676fb8db79"/>
  <con:entry key="key_type" value="D"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>Test client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Test client key 폐기</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Test client key 폐기">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Test client key 폐기" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>true</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="bearer ba524372-5e5e-41ee-bc0b-e8676fb8db79"/>
							<con:entry key="client_key" value="f6880ad5-25d5-4502-a829-870d684b0058"/>
							<con:entry key="secret" value="d11f9553dbc2cbfab4994a216783f904cd2bb1d3"/>
							<con:entry key="key_type" value="D"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - Product" searchProperties="true" id="2eabd8b0-60a4-4e03-897d-317ee914a197" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>true</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="019f85c1-2aa3-473a-aca2-05c580b4d57f"/>
  <con:entry key="secret" value="581d983e1cdc2912c7deee2055753d5e7a4c6b3c"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - 필수항목누락" searchProperties="true" id="265f42b7-9af8-43a8-ab64-cf3c3f136542" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="필수항목누락 테스트 용 Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="필수항목누락 테스트 용 Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="properties" name="client_key 폐기 필수항목 누락 테스트 Properties">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>client_key</con:name>
							<con:value>1dba2cc5-64e7-441b-8a86-83529cebfcca</con:value>
						</con:property>
						<con:property>
							<con:name>secret</con:name>
							<con:value>8ef33969087dac16b59977a37f1b3ddc9efb41eb</con:value>
						</con:property>
						<con:property>
							<con:name>key_type</con:name>
							<con:value>P</con:value>
						</con:property>
						<con:property>
							<con:name>empty_value</con:name>
							<con:value/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>필수항목누락 테스트 용 Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>client_key 폐기 필수항목 누락 테스트 Properties</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for clientkey 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - client_key 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - client_key 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - client_key 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="secret" value="8ef33969087dac16b59977a37f1b3ddc9efb41eb"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key_type 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key_type 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key_type 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="1dba2cc5-64e7-441b-8a86-83529cebfcca"/>
  <con:entry key="secret" value="8ef33969087dac16b59977a37f1b3ddc9efb41eb"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for secret 누락">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>empty_value</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 누락</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - secret 누락">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - secret 누락" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="1dba2cc5-64e7-441b-8a86-83529cebfcca"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key 데이터 삭제">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목 누락 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key 데이터 삭제">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key 데이터 삭제" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="1dba2cc5-64e7-441b-8a86-83529cebfcca"/>
  <con:entry key="secret" value="8ef33969087dac16b59977a37f1b3ddc9efb41eb"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ClientKey 폐기 - 필수항목 값 오류" searchProperties="true" id="d1a3f5e2-5d00-4112-a486-654729fcf313" disabled="true">
			<con:settings/>
			<con:testStep type="restrequest" name="필수항목오류테스트용 Product client key 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="필수항목오류테스트용 Product client key 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"success"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains 1">
							<con:configuration>
								<token>"client_key":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains - secret">
							<con:configuration>
								<token>"secret":</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Schema Compliance" name="Schema Compliance">
							<con:configuration>
								<definition/>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:username xsi:nil="true"/>
							<con:password xsi:nil="true"/>
							<con:domain xsi:nil="true"/>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="properties" name="client_key 폐기 필수항목값오류 테스트 Properties">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>client_key</con:name>
							<con:value>4cfd0f4d-39be-4191-926d-91ba15cf908a</con:value>
						</con:property>
						<con:property>
							<con:name>secret</con:name>
							<con:value>ab6cbdc292825406cdf5e33b9a9db534d6c8a59d</con:value>
						</con:property>
						<con:property>
							<con:name>key_type</con:name>
							<con:value>P</con:value>
						</con:property>
						<con:property>
							<con:name>empty_value</con:name>
							<con:value/>
						</con:property>
						<con:property>
							<con:name>invalid_client_key</con:name>
							<con:value>77c9cd24-bd93-45c1-8768-3a79e5a3e81f</con:value>
						</con:property>
						<con:property>
							<con:name>invlaid_secret</con:name>
							<con:value>1a42309722c5c78832fd1915fe62757c46d67bd8</con:value>
						</con:property>
						<con:property>
							<con:name>invalid_key_type</con:name>
							<con:value>D</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="폐기 test key 설정">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:client_key[1]</con:sourcePath>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="true" transferChildNodes="false" useXQuery="false">
						<con:name>secret</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath>declare namespace
							ns1='http://211.113.53.126/radix/platform/clientKey/';
							//ns1:secret[1]</con:sourcePath>
						<con:targetType>secret</con:targetType>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" entitize="false" transferToAll="false" useXQuery="false" transferChildNodes="false">
						<con:name>key_Type</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>필수항목오류테스트용 Product client key 발급</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>client_key 폐기 필수항목값오류 테스트 Properties</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for clientkey 값오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>client_key for 미존재Key</con:name>
						<con:sourceType>invalid_client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - 존재하지 않는 client_key</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - 존재하지 않는 client_key">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - 존재하지 않는 client_key" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"not_found"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="77c9cd24-bd93-45c1-8768-3a79e5a3e81f"/>
  <con:entry key="secret" value="ab6cbdc292825406cdf5e33b9a9db534d6c8a59d"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key_type 매핑오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>key_type for type오류</con:name>
						<con:sourceType>invalid_key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key_type매핑오류</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key_type매핑오류">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key_type매핑오류" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>"status":"not_found"</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="4cfd0f4d-39be-4191-926d-91ba15cf908a"/>
  <con:entry key="secret" value="ab6cbdc292825406cdf5e33b9a9db534d6c8a59d"/>
  <con:entry key="key_type" value="D"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for secret 매핑오류">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for 갑매핑오류</con:name>
						<con:sourceType>invlaid_secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - secret 매핑오류</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - secret 매핑오류">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - secret 매핑오류" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="4cfd0f4d-39be-4191-926d-91ba15cf908a"/>
  <con:entry key="secret" value="1a42309722c5c78832fd1915fe62757c46d67bd8"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer for key 데이터 삭제">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>client_key for client key 누락</con:name>
						<con:sourceType>client_key</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>client_key</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>key_type for client_key 누락</con:name>
						<con:sourceType>key_type</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>key_type</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>secret for client_key 누락</con:name>
						<con:sourceType>secret</con:sourceType>
						<con:sourceStep>client_key 폐기 필수항목값오류 테스트 Properties</con:sourceStep>
						<con:targetType>secret</con:targetType>
						<con:targetStep>Product client key 폐기 - key 데이터 삭제</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Product client key 폐기 - key 데이터 삭제">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/clientKeys/{client_key}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Product client key 폐기 - key 데이터 삭제" mediaType="application/xml" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="client_key" value="4cfd0f4d-39be-4191-926d-91ba15cf908a"/>
  <con:entry key="secret" value="ab6cbdc292825406cdf5e33b9a9db534d6c8a59d"/>
  <con:entry key="key_type" value="P"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="Radix_PlatformAPI_Service">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Remove_Service_NORMAL" searchProperties="true" id="7543e1d3-301c-4be1-a501-45f640002088">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo113</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://api.withapi.com</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>service_id</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="success">
							<con:configuration>
								<token/>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo113&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>authKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partner_id</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>serviceId</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath>declare namespace
							ns2='http://211.113.53.126/radix/platform/service';
							//ns2:service_id[1]</con:sourcePath>
						<con:targetType>ServiceID</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>success</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="1"/>
  <con:entry key="ServiceName" value="ServiceName"/>
  <con:entry key="ServiceID" value="94"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Revision" searchProperties="true" id="85420938-a4c6-44f5-9dae-f0ed87ea83b2">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo113</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo113</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1V2</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>service_id</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="success">
							<con:configuration>
								<token/>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo113&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>2&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>authKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partner_id</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>serviceId</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath>declare namespace
							ns2='http://211.113.53.126/radix/platform/service';
							//ns2:service_id[1]</con:sourcePath>
						<con:targetType>ServiceID</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>success</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="1"/>
  <con:entry key="ServiceName" value="ServiceName"/>
  <con:entry key="ServiceID" value="95"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Same_Partner_Alreay_EXIST" searchProperties="true" id="7cbf3428-312e-47bd-b54e-6f7c8779d8b1">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo_for_DUP</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo113</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>service_id</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="success">
							<con:configuration>
								<token/>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo_for_DUP&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 2">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partner_id</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service2</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true">
						<con:name>svcDesc</con:name>
						<con:sourceType>service_description</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service2</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>token</con:name>
						<con:sourceType>Authorization</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service2</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service2">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service2" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo_for_DUP&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>authKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partner_id</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath/>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>serviceId</con:name>
						<con:sourceType>ResponseAsXml</con:sourceType>
						<con:sourceStep>Register_Service</con:sourceStep>
						<con:sourcePath>declare namespace
							ns2='http://211.113.53.126/radix/platform/service';
							//ns2:service_id[1]</con:sourcePath>
						<con:targetType>ServiceID</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:assertion type="Simple Contains" name="Contains">
							<con:configuration>
								<token>success</token>
								<ignoreCase>false</ignoreCase>
								<useRegEx>false</useRegEx>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="1"/>
  <con:entry key="ServiceName" value="ServiceName"/>
  <con:entry key="ServiceID" value="96"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Other_Partner_Already_EXIST" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/xml" postQueryString="false">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo1&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="Bearer c94d7355-632f-4181-9fe0-9a338a350026"/>
  <con:entry key="ServiceName" value="ServiceName"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_NOT_SUPPORT_HTTP_Method" searchProperties="true" id="4263d28e-5bf8-4281-99a8-0cbae431b7d2">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>GET_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET_Service">
				<con:settings/>
				<con:config service="Radix" methodName="GET" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET_Service" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>405</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Empty_ServiceXML" searchProperties="true" id="98ccc281-7317-4f01-98e9-3f3c734e4361">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceEmptyXML</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/xml" postQueryString="false" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value=" " xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_EMPTY_ServiceName" searchProperties="true" id="85f77b20-c8c3-4d0c-aa3f-03c7a4c5aff7">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDescEmptyName</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_EMPTY_ServiceVersion" searchProperties="true" id="2e3a8abe-f681-4ab7-a26c-4f3452729e67">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDescEmptyVersion</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo1&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_EMPTY_PartnerId" searchProperties="true" id="b06911f5-37ca-4861-953f-866ba591f2f2">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
						<con:property>
							<con:name>emptyPartnerId</con:name>
							<con:value/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>emptyPartnerId</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value=""/>
  <con:entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo1&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Register_Service_Invalid_ServiceName_Reserved" searchProperties="true" id="227475e9-2211-4f1a-a890-602616a3ad7c">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDescReservedServiceName</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/x-www-form-urlencoded" postQueryString="true">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>Platform&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Remove_Service_Partner_IS_NOT_OWNER" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/xml" postQueryString="false">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo1&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="Bearer c94d7355-632f-4181-9fe0-9a338a350026"/>
  <con:entry key="ServiceName" value="ServiceName"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Remove_Service_Empty_ServiceID" searchProperties="true" id="177a6c82-7045-4e98-9755-063b905aa1cb">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
						<con:property>
							<con:name>emptyValue</con:name>
							<con:value/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>serviceId</con:name>
						<con:sourceType>emptyValue</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>ServiceID</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.62.41.212:8090</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="1"/>
  <con:entry key="ServiceID" value=""/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Remove_Service_NOT_Exist" searchProperties="true" id="126fefb9-aba3-41ad-b454-29a0202ab07a">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
						<con:property>
							<con:name>NOTEXIST_SERVICE_ID</con:name>
							<con:value>99999</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>serviceId</con:name>
						<con:sourceType>NOTEXIST_SERVICE_ID</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>ServiceID</con:targetType>
						<con:targetStep>RemoveService</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="partner_id" value="1"/>
  <con:entry key="ServiceName" value="ServiceName"/>
  <con:entry key="ServiceID" value="99999"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Remove_Service_NOT_SUPPORT_METHOD" searchProperties="true" id="c966e75b-55b8-46fa-b839-5c63db455f7c">
			<con:settings/>
			<con:testStep type="properties" name="P_PlatformAPI_Service_normal">
				<con:settings/>
				<con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:properties>
						<con:property>
							<con:name>serviceDesc1</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc1V2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major>2</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDesc2</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo2</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceEmptyXML</con:name>
							<con:value>
							</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name></name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescEmptyVersion</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>SOAPTourInfo1</name> <!-- Partner 가 정의 -->     <version>        <major></major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_1</con:name>
							<con:value>1</con:value>
						</con:property>
						<con:property>
							<con:name>partnerId_2</con:name>
							<con:value>2</con:value>
						</con:property>
						<con:property>
							<con:name>serviceDescReservedServiceName</con:name>
							<con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Service>     <name>Platform</name> <!-- Partner 가 정의 -->     <version>        <major>1</major>        <minor>3</minor>  <!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     </version>     <resource>        <owner>user</owner> <!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        <authURL>http://auth.koreatour.com/auth</authURL> <!-- 인증 URL (user가 resource owner 일 경우) -->     </resource>     <api-list>         <api routingMethod="Direct">             <service-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <method>GET</method>                 <resource>hotel</resource>                 <additionalResources>                     <resource name="attr1"/>                     <resource name="attr2"/>                 </additionalResources>                 <params>                     <param name="param1"/>                     <param name="param2"/>                 </params>             </service-api>             <partner-api type="REST" protocol="HTTP1.1">                 <name>getHotel</name>                 <uri>api.koreatour.com:80/tourinfo/hotel.jsp</uri>                 <method>GET</method>                 <content-type>application/xml</content-type>                 <user>kth</user>                 <password>123456789</password>                 <signature-encoding>SHA256(timestamp+{password}+"static string")</signature-encoding>                 <params>                     <param name="region"/>                     <param name="hotelId"/>                     <param name="reference"><default type="script">random.string(16)</default></param>                 </params>                 <transform>XML</transform>             </partner-api>             <mapping>                 <parameter>                     <map from="region" to="region"/>                     <map from="hotel" to="hotelId" />                 </parameter>                 <result>                     <map from="region.name" to="region.pname"/>                 </result>             </mapping>         </api>     </api-list>     <orchestration>         <api-list>             <api>                 <service-api>                     <method>GET</method>                     <resource>tourlocation/hotel/</resource>                     <params>                         <param name="hotel"/>                     </params>                 </service-api>                 <scenario> <!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 </scenario>             </api>         </api-list>     </orchestration> </Service>]]></con:value>
						</con:property>
						<con:property>
							<con:name>PlatformAPIOAuthKey</con:name>
							<con:value>Bearer e0b30e47-559c-4d40-bf64-9550ea10ad12</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName1</con:name>
							<con:value>SOAPTourInfo1</con:value>
						</con:property>
						<con:property>
							<con:name>serviceName2</con:name>
							<con:value>SOAPTourInfo2</con:value>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>svcDesc</con:name>
						<con:sourceType>serviceDesc1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>service_description</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>oauthKey</con:name>
						<con:sourceType>PlatformAPIOAuthKey</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>Authorization</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false">
						<con:name>partnerId</con:name>
						<con:sourceType>partnerId_1</con:sourceType>
						<con:sourceStep>P_PlatformAPI_Service_normal</con:sourceStep>
						<con:targetType>partner_id</con:targetType>
						<con:targetStep>Register_Service</con:targetStep>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Register_Service">
				<con:settings/>
				<con:config service="Radix" methodName="POST" resourcePath="/platform/services" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Register_Service" mediaType="application/xml" postQueryString="false">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="service_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;Service>     &lt;name>SOAPTourInfo1&lt;/name> &lt;!-- Partner 가 정의 -->     &lt;version>        &lt;major>1&lt;/major>        &lt;minor>3&lt;/minor>  &lt;!--  Partner 가 정의하되 같은 서비스가 이미 존재한다면 버전은 커야함  -->     &lt;/version>     &lt;resource>        &lt;owner>user&lt;/owner> &lt;!-- user (이용자), partner (service 제공자가 resource 를 소유함) -->        &lt;authURL>http://auth.koreatour.com/auth&lt;/authURL> &lt;!-- 인증 URL (user가 resource owner 일 경우) -->     &lt;/resource>     &lt;api-list>         &lt;api routingMethod=&quot;Direct&quot;>             &lt;service-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;method>GET&lt;/method>                 &lt;resource>hotel&lt;/resource>                 &lt;additionalResources>                     &lt;resource name=&quot;attr1&quot;/>                     &lt;resource name=&quot;attr2&quot;/>                 &lt;/additionalResources>                 &lt;params>                     &lt;param name=&quot;param1&quot;/>                     &lt;param name=&quot;param2&quot;/>                 &lt;/params>             &lt;/service-api>             &lt;partner-api type=&quot;REST&quot; protocol=&quot;HTTP1.1&quot;>                 &lt;name>getHotel&lt;/name>                 &lt;uri>api.koreatour.com:80/tourinfo/hotel.jsp&lt;/uri>                 &lt;method>GET&lt;/method>                 &lt;content-type>application/xml&lt;/content-type>                 &lt;user>kth&lt;/user>                 &lt;password>123456789&lt;/password>                 &lt;signature-encoding>SHA256(timestamp+{password}+&quot;static string&quot;)&lt;/signature-encoding>                 &lt;params>                     &lt;param name=&quot;region&quot;/>                     &lt;param name=&quot;hotelId&quot;/>                     &lt;param name=&quot;reference&quot;>&lt;default type=&quot;script&quot;>random.string(16)&lt;/default>&lt;/param>                 &lt;/params>                 &lt;transform>XML&lt;/transform>             &lt;/partner-api>             &lt;mapping>                 &lt;parameter>                     &lt;map from=&quot;region&quot; to=&quot;region&quot;/>                     &lt;map from=&quot;hotel&quot; to=&quot;hotelId&quot; />                 &lt;/parameter>                 &lt;result>                     &lt;map from=&quot;region.name&quot; to=&quot;region.pname&quot;/>                 &lt;/result>             &lt;/mapping>         &lt;/api>     &lt;/api-list>     &lt;orchestration>         &lt;api-list>             &lt;api>                 &lt;service-api>                     &lt;method>GET&lt;/method>                     &lt;resource>tourlocation/hotel/&lt;/resource>                     &lt;params>                         &lt;param name=&quot;hotel&quot;/>                     &lt;/params>                 &lt;/service-api>                 &lt;scenario> &lt;!-- we need to define the description of one to many(one or more) function and their multiple calling or series calling properties -->                 &lt;/scenario>             &lt;/api>         &lt;/api-list>     &lt;/orchestration> &lt;/Service>" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="transfer" name="Property Transfer 1">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
			</con:testStep>
			<con:testStep type="restrequest" name="RemoveService">
				<con:settings/>
				<con:config service="Radix" methodName="DELETE" resourcePath="/platform/services/{ServiceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="RemoveService" mediaType="application/xml">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="Authorization" value="Bearer c94d7355-632f-4181-9fe0-9a338a350026"/>
  <con:entry key="ServiceName" value="ServiceName"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="Radix_OAuth_Token_validation">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 유효성검사 - Implicit Grant Token" searchProperties="true" id="63f8f7ef-ff1f-451c-acd9-9e0a94231c8d">
			<con:settings/>
			<con:testStep type="restrequest" name="implicit grant token 발급">
				<con:settings/>
				<con:config service="Radix" resourcePath="/oauth/authorize" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="implicit grant token 발급" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							<con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>302</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
  <con:entry key="response_type" value="token"/>
  <con:entry key="redirect_uri" value="http://www.paran.com"/>
</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 유효성검사 - Auth Code Grant Token 검사" searchProperties="true" disabled="true">
			<con:settings/>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 유효성 검사 - 유효하지 않은 Token" searchProperties="true" id="40691ef5-eb30-4215-965d-a7d44bbe6a78">
			<con:settings/>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>invalid_token</con:name>
						<con:sourceType>invalid_token</con:sourceType>
						<con:sourceStep>#TestSuite#</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep xsi:nil="true"/>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Token 유효성 검사 - 만료된 Token" searchProperties="true" id="878b722d-4a0c-44ea-b405-b777f3012710">
			<con:settings/>
			<con:testStep type="transfer" name="Property Transfer">
				<con:settings/>
				<con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false">
						<con:name>expired_token</con:name>
						<con:sourceType>expired_token</con:sourceType>
						<con:sourceStep>#TestSuite#</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep xsi:nil="true"/>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties>
			<con:property>
				<con:name>token</con:name>
				<con:value>Bearer f6d9adc0-fdac-4bfc-9cac-882967a61ba7</con:value>
			</con:property>
			<con:property>
				<con:name>invalid_token</con:name>
				<con:value>Bearer 208c1779-243f-4c75-bd6a-dc6aa6c6adc</con:value>
			</con:property>
			<con:property>
				<con:name>expired_token</con:name>
				<con:value>Bearer 208c1779-243f-4c75-bd6a-dc6aa6c6adce</con:value>
			</con:property>
		</con:properties>
	</con:testSuite>
	<con:testSuite name="Radix TestSuite - ServiceAPI - Aro">
		<con:description>TestSuite generated for REST Service [Radix]</con:description>
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Radix TestSuite" searchProperties="true" id="bc19d5e8-ed44-4797-b722-2af101c2dc3e">
			<con:settings/>
			<con:testStep type="restrequest" name="BusLaneSearch">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/packages" methodName="POST (create)" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="BusLaneSearch" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="BusLane">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/packages" methodName="POST (create)" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="BusLane" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="BusStationSearch">
				<con:settings/>
				<con:config service="Radix" resourcePath="/PublicTransport3/BusStationResult/StationID={stationID}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="BusStationSearch" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="BusStation">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/packages" methodName="POST (create)" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="BusStation" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="MapLoadLane">
				<con:settings/>
				<con:config service="Radix" resourcePath="/platform/packages" methodName="POST (create)" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="MapLoadLane" mediaType="application/xml" accept="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>http://211.113.53.126:8088</con:endpoint>
						<con:request/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer 3f1e712e-3749-4587-aace-51b4367b5728" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			
			
			
			
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="Radix_PlatformAPI_Package TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RC_Register_and_Remove_NORMAL" searchProperties="true" id="6af91975-fc40-41be-98f7-bc3da00b6910"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="REST Test Request"><con:settings/><con:config service="Radix" resourcePath="/platform/packages" methodName="POST (create)" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://211.113.53.126:8088</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer e67ce50c-0eed-404e-9291-cd5e8052e2f7"/>
  <con:entry key="package_description" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?> &lt;package name=&quot;package1&quot;>  &lt;apis>   &lt;api id=&quot;&quot;>    &lt;policies>     &lt;policy id=&quot;1&quot; startDate=&quot;2012/02/23 00:00:00&quot; endDate=&quot;2012/03/23 23:59:59&quot; maxCount=&quot;10000&quot;/>     &lt;policy id=&quot;2&quot; startDate=&quot;2012/02/23 00:00:00&quot; endDate=&quot;2012/03/23 23:59:59&quot;/>    &lt;/policies>   &lt;/api>  &lt;/apis>  &lt;policies>  &lt;/policies> &lt;/package>"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/>
	<con:wssContainer/>
	<con:sensitiveInformation/>
</con:soapui-project>